


<!DOCTYPE html>
<html lang="en" class=" is-copy-enabled">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    <meta name="viewport" content="width=1020">
    
    
    <title>dustjs/dust-full-0.3.0.min.js at master · akdubya/dustjs · GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="akdubya/dustjs" name="twitter:title" /><meta content="dustjs - Asynchronous templates for the browser and node.js" name="twitter:description" /><meta content="https://avatars0.githubusercontent.com/u/26553?v=3&amp;s=400" name="twitter:image:src" />
      <meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars0.githubusercontent.com/u/26553?v=3&amp;s=400" property="og:image" /><meta content="akdubya/dustjs" property="og:title" /><meta content="https://github.com/akdubya/dustjs" property="og:url" /><meta content="dustjs - Asynchronous templates for the browser and node.js" property="og:description" />
      <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">
    <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">
    <link rel="assets" href="https://assets-cdn.github.com/">
    
    <meta name="pjax-timeout" content="1000">
    

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
        <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="4A5376D4:63DB:7E4BFDE:55E8F054" name="octolytics-dimension-request_id" />
    
    <meta content="Rails, view, blob#show" data-pjax-transient="true" name="analytics-event" />
    <meta class="js-ga-set" name="dimension1" content="Logged Out">
      <meta class="js-ga-set" name="dimension4" content="Current repo nav">
    <meta name="is-dotcom" content="true">
        <meta name="hostname" content="github.com">
    <meta name="user-login" content="">

      <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#4078c0">
      <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">

    <!-- </textarea> --><!-- '"` --><meta content="authenticity_token" name="csrf-param" />
<meta content="LhDHwSWFW7P1Ax2CS9c67aFisUYElPYIPPr9yOfdy30jRDR8JFkcLW2ZP9lLV5eh8l3rQgyKZX9i+F0+uUNMIA==" name="csrf-token" />
    

    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-760a949769f2883d6febd885c263b1f47c072484378029415608e3a1460a25c6.css" media="all" rel="stylesheet" />
    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github2-622bce26a4704c8a581fe1ea2864ebd68f814c46932d04cc01380f6bb286efa9.css" media="all" rel="stylesheet" />
    
    


    <meta http-equiv="x-pjax-version" content="149580d3d3b10f17193e44011416b0be">

      
  <meta name="description" content="dustjs - Asynchronous templates for the browser and node.js">
  <meta name="go-import" content="github.com/akdubya/dustjs git https://github.com/akdubya/dustjs.git">

  <meta content="26553" name="octolytics-dimension-user_id" /><meta content="akdubya" name="octolytics-dimension-user_login" /><meta content="1021622" name="octolytics-dimension-repository_id" /><meta content="akdubya/dustjs" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="1021622" name="octolytics-dimension-repository_network_root_id" /><meta content="akdubya/dustjs" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/akdubya/dustjs/commits/master.atom" rel="alternate" title="Recent Commits to dustjs:master" type="application/atom+xml">

  </head>


  <body class="logged_out  env-production windows vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>

    
    
    



      
      <div class="header header-logged-out" role="banner">
  <div class="container clearfix">

    <a class="header-logo-wordmark" href="https://github.com/" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
      <span class="mega-octicon octicon-logo-github"></span>
    </a>

    <div class="header-actions" role="navigation">
        <a class="btn btn-primary" href="/join" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up">Sign up</a>
      <a class="btn" href="/login?return_to=%2Fakdubya%2Fdustjs%2Fblob%2Fmaster%2Fdist%2Fdust-full-0.3.0.min.js" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">Sign in</a>
    </div>

    <div class="site-search repo-scope js-site-search" role="search">
      <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/akdubya/dustjs/search" class="js-site-search-form" data-global-search-url="/search" data-repo-search-url="/akdubya/dustjs/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
  <label class="js-chromeless-input-container form-control">
    <div class="scope-badge">This repository</div>
    <input type="text"
      class="js-site-search-focus js-site-search-field is-clearable chromeless-input"
      data-hotkey="s"
      name="q"
      placeholder="Search"
      aria-label="Search this repository"
      data-global-scope-placeholder="Search GitHub"
      data-repo-scope-placeholder="Search"
      tabindex="1"
      autocapitalize="off">
  </label>
</form>
    </div>

      <ul class="header-nav left" role="navigation">
          <li class="header-nav-item">
            <a class="header-nav-link" href="/explore" data-ga-click="(Logged out) Header, go to explore, text:explore">Explore</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/features" data-ga-click="(Logged out) Header, go to features, text:features">Features</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://enterprise.github.com/" data-ga-click="(Logged out) Header, go to enterprise, text:enterprise">Enterprise</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/pricing" data-ga-click="(Logged out) Header, go to pricing, text:pricing">Pricing</a>
          </li>
      </ul>

  </div>
</div>



    <div id="start-of-content" class="accessibility-aid"></div>

    <div id="js-flash-container">
</div>


        <div itemscope itemtype="http://schema.org/WebPage">
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">

        <div class="clearfix">
          
<ul class="pagehead-actions">

  <li>
      <a href="/login?return_to=%2Fakdubya%2Fdustjs"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to watch a repository" rel="nofollow">
    <span class="octicon octicon-eye"></span>
    Watch
  </a>
  <a class="social-count" href="/akdubya/dustjs/watchers">
    54
  </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fakdubya%2Fdustjs"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <span class="octicon octicon-star"></span>
    Star
  </a>

    <a class="social-count js-social-count" href="/akdubya/dustjs/stargazers">
      1,438
    </a>

  </li>

    <li>
      <a href="/login?return_to=%2Fakdubya%2Fdustjs"
        class="btn btn-sm btn-with-count tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <span class="octicon octicon-repo-forked"></span>
        Fork
      </a>
      <a href="/akdubya/dustjs/network" class="social-count">
        145
      </a>
    </li>
</ul>

          <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public ">
  <span class="mega-octicon octicon-repo"></span>
  <span class="author"><a href="/akdubya" class="url fn" itemprop="url" rel="author"><span itemprop="title">akdubya</span></a></span><!--
--><span class="path-divider">/</span><!--
--><strong><a href="/akdubya/dustjs" data-pjax="#js-repo-pjax-container">dustjs</a></strong>

  <span class="page-context-loader">
    <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
  </span>

</h1>

        </div>
      </div>
    </div>

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline ">
        <div class="repository-sidebar clearfix">
          
<nav class="sunken-menu repo-nav js-repo-nav js-sidenav-container-pjax js-octicon-loaders"
     role="navigation"
     data-pjax="#js-repo-pjax-container"
     data-issue-count-url="/akdubya/dustjs/issues/counts">
  <ul class="sunken-menu-group">
    <li class="tooltipped tooltipped-w" aria-label="Code">
      <a href="/akdubya/dustjs" aria-label="Code" aria-selected="true" class="js-selected-navigation-item selected sunken-menu-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /akdubya/dustjs">
        <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

      <li class="tooltipped tooltipped-w" aria-label="Issues">
        <a href="/akdubya/dustjs/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /akdubya/dustjs/issues">
          <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
          <span class="js-issue-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

    <li class="tooltipped tooltipped-w" aria-label="Pull requests">
      <a href="/akdubya/dustjs/pulls" aria-label="Pull requests" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g p" data-selected-links="repo_pulls /akdubya/dustjs/pulls">
          <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull requests</span>
          <span class="js-pull-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

  </ul>
  <div class="sunken-menu-separator"></div>
  <ul class="sunken-menu-group">

    <li class="tooltipped tooltipped-w" aria-label="Pulse">
      <a href="/akdubya/dustjs/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-selected-links="pulse /akdubya/dustjs/pulse">
        <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

    <li class="tooltipped tooltipped-w" aria-label="Graphs">
      <a href="/akdubya/dustjs/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-selected-links="repo_graphs repo_contributors /akdubya/dustjs/graphs">
        <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>
  </ul>


</nav>

            <div class="only-with-full-nav">
                
<div class="js-clone-url clone-url open"
  data-protocol-type="http">
  <h3><span class="text-emphasized">HTTPS</span> clone URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/akdubya/dustjs.git" readonly="readonly" aria-label="HTTPS clone URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="js-clone-url clone-url "
  data-protocol-type="subversion">
  <h3><span class="text-emphasized">Subversion</span> checkout URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/akdubya/dustjs" readonly="readonly" aria-label="Subversion checkout URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>



  <div class="clone-options">You can clone with
    <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone" class="inline-form js-clone-selector-form " data-form-nonce="b6278a60637c22ec20bf93feeaf39f88b8e2cf2d" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="GMmX0k5ZyaAsGwLogz86KZ+ZrWIt5XUuG27PHrYTG4m/XUZPSJCG6xOwQ5tDP761UWK8Olw2Lx2JqFdA0q9FHA==" /></div><button class="btn-link js-clone-selector" data-protocol="http" type="submit">HTTPS</button></form> or <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone" class="inline-form js-clone-selector-form " data-form-nonce="b6278a60637c22ec20bf93feeaf39f88b8e2cf2d" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="Ggua/RVWeHwYI6TuHBawmEPLUOk34/gCZ2q3pljRridw8OqSG9R1ME5YqlbT3FPlGziOT0v97tJsGwxRX9tb8A==" /></div><button class="btn-link js-clone-selector" data-protocol="subversion" type="submit">Subversion</button></form>.
    <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
      <span class="octicon octicon-question"></span>
    </a>
  </div>
    <a href="https://windows.github.com" class="btn btn-sm sidebar-button" title="Save akdubya/dustjs to your computer and use it in GitHub Desktop." aria-label="Save akdubya/dustjs to your computer and use it in GitHub Desktop.">
      <span class="octicon octicon-desktop-download"></span>
      Clone in Desktop
    </a>

              <a href="/akdubya/dustjs/archive/master.zip"
                 class="btn btn-sm sidebar-button"
                 aria-label="Download the contents of akdubya/dustjs as a zip file"
                 title="Download the contents of akdubya/dustjs as a zip file"
                 rel="nofollow">
                <span class="octicon octicon-cloud-download"></span>
                Download ZIP
              </a>
            </div>
        </div>
        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>

          

<a href="/akdubya/dustjs/blob/e81af2caca0813353351032e9d28205f84c96ea4/dist/dust-full-0.3.0.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:04a653cb3dec7091b6c098e45add2fef -->

  <div class="file-navigation js-zeroclipboard-container">
    
<div class="select-menu js-menu-container js-select-menu left">
  <span class="btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-ref="master"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <i>Branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/akdubya/dustjs/blob/gh-pages/dist/dust-full-0.3.0.min.js"
               data-name="gh-pages"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="gh-pages">
                gh-pages
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/akdubya/dustjs/blob/master/dist/dust-full-0.3.0.min.js"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="master">
                master
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/akdubya/dustjs/tree/v0.3.0/dist/dust-full-0.3.0.min.js"
                 data-name="v0.3.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v0.3.0">v0.3.0</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/akdubya/dustjs/tree/v0.2.5/dist/dust-full-0.3.0.min.js"
                 data-name="v0.2.5"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v0.2.5">v0.2.5</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/akdubya/dustjs/tree/v0.2.0/dist/dust-full-0.3.0.min.js"
                 data-name="v0.2.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v0.2.0">v0.2.0</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/akdubya/dustjs/tree/v0.1.0/dist/dust-full-0.3.0.min.js"
                 data-name="v0.1.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v0.1.0">v0.1.0</a>
            </div>
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/akdubya/dustjs/tree/v0.0.1/dist/dust-full-0.3.0.min.js"
                 data-name="v0.0.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v0.0.1">v0.0.1</a>
            </div>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="btn-group right">
      <a href="/akdubya/dustjs/find/master"
            class="js-show-file-finder btn btn-sm empty-icon tooltipped tooltipped-nw"
            data-pjax
            data-hotkey="t"
            aria-label="Quickly jump between files">
        <span class="octicon octicon-list-unordered"></span>
      </a>
      <button aria-label="Copy file path to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </div>

    <div class="breadcrumb js-zeroclipboard-target">
      <span class="repo-root js-repo-root"><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/akdubya/dustjs" class="" data-branch="master" data-pjax="true" itemscope="url"><span itemprop="title">dustjs</span></a></span></span><span class="separator">/</span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/akdubya/dustjs/tree/master/dist" class="" data-branch="master" data-pjax="true" itemscope="url"><span itemprop="title">dist</span></a></span><span class="separator">/</span><strong class="final-path">dust-full-0.3.0.min.js</strong>
    </div>
  </div>


  <div class="commit file-history-tease">
    <div class="file-history-tease-header">
        <img alt="" class="avatar" height="24" src="https://1.gravatar.com/avatar/3ac133d36859dc5c2d07ddea3f9589bd?d=https%3A%2F%2Fassets-cdn.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png&amp;r=x&amp;s=140" width="24" />
        <span class="author"><span>akdubya</span></span>
        <time datetime="2011-01-26T08:31:37Z" is="relative-time">Jan 26, 2011</time>
        <div class="commit-title">
            <a href="/akdubya/dustjs/commit/7469a94222b3ab40763121f85d3e1fc5772e9106" class="message" data-pjax="true" title="release v0.3.0">release v0.3.0</a>
        </div>
    </div>

    <div class="participation">
      <p class="quickstat">
        <a href="#blob_contributors_box" rel="facebox">
          <strong>0</strong>
           contributors
        </a>
      </p>
      
    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header" data-facebox-id="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list" data-facebox-id="facebox-description">
      </ul>
    </div>
  </div>

<div class="file">
  <div class="file-header">
    <div class="file-actions">

      <div class="btn-group">
        <a href="/akdubya/dustjs/raw/master/dist/dust-full-0.3.0.min.js" class="btn btn-sm " id="raw-url">Raw</a>
          <a href="/akdubya/dustjs/blame/master/dist/dust-full-0.3.0.min.js" class="btn btn-sm js-update-url-with-hash">Blame</a>
        <a href="/akdubya/dustjs/commits/master/dist/dust-full-0.3.0.min.js" class="btn btn-sm " rel="nofollow">History</a>
      </div>

        <a class="octicon-btn tooltipped tooltipped-nw"
           href="https://windows.github.com"
           aria-label="Open this file in GitHub Desktop"
           data-ga-click="Repository, open with desktop, type:windows">
            <span class="octicon octicon-device-desktop"></span>
        </a>

          <button type="button" class="octicon-btn disabled tooltipped tooltipped-n" aria-label="You must be signed in to make or propose changes">
            <span class="octicon octicon-pencil"></span>
          </button>

        <button type="button" class="octicon-btn octicon-btn-danger disabled tooltipped tooltipped-n" aria-label="You must be signed in to make or propose changes">
          <span class="octicon octicon-trashcan"></span>
        </button>
    </div>

    <div class="file-info">
        62 lines (60 sloc)
        <span class="file-info-divider"></span>
      25.847 kB
    </div>
  </div>
  

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-c">//</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Dust - Asynchronous Templating v0.3.0</span></td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// http://akdubya.github.com/dustjs</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-c">//</span></td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Copyright (c) 2010, Aleksander Williams</span></td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Released under the MIT License.</span></td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-c">//</span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dust<span class="pl-k">=</span>{};</td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">o</span>){<span class="pl-k">function</span> <span class="pl-en">z</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-v">this</span>.stack<span class="pl-k">=</span>e;<span class="pl-v">this</span>.<span class="pl-c1">global</span><span class="pl-k">=</span>k;<span class="pl-v">this</span>.blocks<span class="pl-k">=</span>l}<span class="pl-k">function</span> <span class="pl-en">H</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">x</span>){<span class="pl-v">this</span>.tail<span class="pl-k">=</span>k;<span class="pl-v">this</span>.isObject<span class="pl-k">=!</span>o.isArray(e)<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&amp;&amp;typeof</span> e<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>object<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.head<span class="pl-k">=</span>e;<span class="pl-v">this</span>.<span class="pl-c1">index</span><span class="pl-k">=</span>l;<span class="pl-v">this</span>.of<span class="pl-k">=</span>x}<span class="pl-k">function</span> <span class="pl-en">p</span>(<span class="pl-smi">e</span>){<span class="pl-v">this</span>.head<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.callback<span class="pl-k">=</span>e;<span class="pl-v">this</span>.out<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>}<span class="pl-k">function</span> <span class="pl-en">J</span>(){<span class="pl-v">this</span>.head<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>(<span class="pl-v">this</span>)}<span class="pl-k">function</span> <span class="pl-en">B</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-v">this</span>.root<span class="pl-k">=</span>e;<span class="pl-v">this</span>.<span class="pl-c1">next</span><span class="pl-k">=</span>k;<span class="pl-v">this</span>.<span class="pl-c1">data</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.flushable<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.taps<span class="pl-k">=</span>l}<span class="pl-k">function</span> <span class="pl-en">r</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-v">this</span>.head<span class="pl-k">=</span>e;<span class="pl-v">this</span>.tail<span class="pl-k">=</span>k}o.cache<span class="pl-k">=</span>{};<span class="pl-c1">o</span>.<span class="pl-en">register</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">if</span>(e)o.cache[e]<span class="pl-k">=</span>k};<span class="pl-c1">o</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){l<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">p</span>(l)).head;</td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line">o.<span class="pl-c1">load</span>(e,l,z.wrap(k)).end()};<span class="pl-c1">o</span>.<span class="pl-en">stream</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">J</span>;o.nextTick(<span class="pl-k">function</span>(){o.<span class="pl-c1">load</span>(e,l.head,z.wrap(k)).end()});<span class="pl-k">return</span> l};<span class="pl-c1">o</span>.<span class="pl-en">renderSource</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">return</span> o.compileFn(e)(k,l)};<span class="pl-c1">o</span>.<span class="pl-en">compileFn</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span>o.loadSource(o.<span class="pl-c1">compile</span>(e,k));<span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">x</span>,<span class="pl-smi">C</span>){<span class="pl-k">var</span> E<span class="pl-k">=</span>C<span class="pl-k">?</span><span class="pl-k">new</span> <span class="pl-en">p</span>(C)<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">J</span>;o.nextTick(<span class="pl-k">function</span>(){l(E.head,z.wrap(x)).end()});<span class="pl-k">return</span> E}};<span class="pl-c1">o</span>.<span class="pl-en">load</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">var</span> x<span class="pl-k">=</span>o.cache[e];<span class="pl-k">if</span>(x)<span class="pl-k">return</span> x(k,l);<span class="pl-k">else</span>{<span class="pl-k">if</span>(o.<span class="pl-c1">onLoad</span>)<span class="pl-k">return</span> k.map(<span class="pl-k">function</span>(<span class="pl-smi">C</span>){o.<span class="pl-c1">onLoad</span>(e,<span class="pl-k">function</span>(<span class="pl-smi">E</span>,<span class="pl-smi">M</span>){<span class="pl-k">if</span>(E)<span class="pl-k">return</span> C.setError(E);</td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line">o.cache[e]<span class="pl-k">||</span>o.loadSource(o.<span class="pl-c1">compile</span>(M,e));o.cache[e](C,l).end()})});<span class="pl-k">return</span> k.setError(Error(<span class="pl-s"><span class="pl-pds">&quot;</span>Template Not Found: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>e))}};<span class="pl-c1">o</span>.<span class="pl-en">loadSource</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-c1">eval</span>(e)};o.isArray<span class="pl-k">=</span><span class="pl-en">Array.isArray?Array.isArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-c1">Object</span>.<span class="pl-c1">prototype</span>.toString.<span class="pl-c1">call</span>(e)<span class="pl-k">==</span><span class="pl-s"><span class="pl-pds">&quot;</span>[object Array]<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">o</span>.<span class="pl-en">nextTick</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-c1">setTimeout</span>(e,<span class="pl-c1">0</span>)};<span class="pl-c1">o</span>.<span class="pl-en">isEmpty</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">if</span>(o.isArray(e)<span class="pl-k">&amp;&amp;!</span>e.<span class="pl-c1">length</span>)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">if</span>(e<span class="pl-k">===</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">return</span><span class="pl-k">!</span>e};<span class="pl-c1">o</span>.<span class="pl-en">filter</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">if</span>(l)<span class="pl-k">for</span>(<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-c1">0</span>,C<span class="pl-k">=</span>l.<span class="pl-c1">length</span>;x<span class="pl-k">&lt;</span>C;x<span class="pl-k">++</span>){<span class="pl-k">var</span> E<span class="pl-k">=</span>l[x];<span class="pl-k">if</span>(E<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>s<span class="pl-pds">&quot;</span></span>)k<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">else</span> e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line">o.filters[E](e)}<span class="pl-k">if</span>(k)e<span class="pl-k">=</span>o.filters[k](e);<span class="pl-k">return</span> e};o.filters<span class="pl-k">=</span>{<span class="pl-en">h</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">return</span> o.escapeHtml(e)},<span class="pl-en">j</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">return</span> o.escapeJs(e)},u<span class="pl-k">:</span>encodeURI,uc<span class="pl-k">:</span>encodeURIComponent};<span class="pl-c1">o</span>.<span class="pl-en">makeBase</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">z</span>(<span class="pl-k">new</span> <span class="pl-en">H</span>,e)};<span class="pl-c1">z</span>.<span class="pl-en">wrap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> z)<span class="pl-k">return</span> e;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">z</span>(<span class="pl-k">new</span> <span class="pl-en">H</span>(e))};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">get</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>.stack,l;k;){<span class="pl-k">if</span>(k.isObject){l<span class="pl-k">=</span>k.head[e];<span class="pl-k">if</span>(l<span class="pl-k">!==</span><span class="pl-c1">undefined</span>)<span class="pl-k">return</span> l}k<span class="pl-k">=</span>k.tail}<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">global</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">global</span>[e]<span class="pl-k">:</span><span class="pl-c1">undefined</span>};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPath</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-v">this</span>.stack,x<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(e<span class="pl-k">&amp;&amp;</span>x<span class="pl-k">===</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> l.head;<span class="pl-k">if</span>(l.isObject){l<span class="pl-k">=</span>l.head;<span class="pl-k">for</span>(<span class="pl-k">var</span> C<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&amp;&amp;</span>C<span class="pl-k">&lt;</span>x;){l<span class="pl-k">=</span>l[k[C]];C<span class="pl-k">++</span>}<span class="pl-k">return</span> l}};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">push</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">z</span>(<span class="pl-k">new</span> <span class="pl-en">H</span>(e,<span class="pl-v">this</span>.stack,k,l),<span class="pl-v">this</span>.<span class="pl-c1">global</span>,<span class="pl-v">this</span>.blocks)};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">rebase</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">z</span>(<span class="pl-k">new</span> <span class="pl-en">H</span>(e),<span class="pl-v">this</span>.<span class="pl-c1">global</span>,<span class="pl-v">this</span>.blocks)};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">current</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.stack.head};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getBlock</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>.blocks;<span class="pl-k">if</span>(k)<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span>k.<span class="pl-c1">length</span>,x;l<span class="pl-k">--</span>;)<span class="pl-k">if</span>(x<span class="pl-k">=</span>k[l][e])<span class="pl-k">return</span> x};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">shiftBlocks</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>.blocks;<span class="pl-k">if</span>(e){newBlocks<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">?</span>k.<span class="pl-c1">concat</span>([e])<span class="pl-k">:</span>[e];<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">z</span>(<span class="pl-v">this</span>.stack,<span class="pl-v">this</span>.<span class="pl-c1">global</span>,newBlocks)}<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">flush</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.head;e;){<span class="pl-k">if</span>(e.flushable)<span class="pl-v">this</span>.out<span class="pl-k">+=</span>e.<span class="pl-c1">data</span>;<span class="pl-k">else</span>{<span class="pl-k">if</span>(e<span class="pl-c1">.error</span>){<span class="pl-v">this</span>.callback(e<span class="pl-c1">.error</span>);<span class="pl-c1">this</span>.<span class="pl-en">flush</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}}<span class="pl-k">return</span>}<span class="pl-v">this</span>.head<span class="pl-k">=</span>e<span class="pl-k">=</span>e.<span class="pl-c1">next</span>}<span class="pl-v">this</span>.callback(<span class="pl-c1">null</span>,<span class="pl-v">this</span>.out)};<span class="pl-c1">J</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">flush</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.head;e;){<span class="pl-k">if</span>(e.flushable)<span class="pl-v">this</span>.emit(<span class="pl-s"><span class="pl-pds">&quot;</span>data<span class="pl-pds">&quot;</span></span>,e.<span class="pl-c1">data</span>);<span class="pl-k">else</span>{<span class="pl-k">if</span>(e<span class="pl-c1">.error</span>){<span class="pl-v">this</span>.emit(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,e<span class="pl-c1">.error</span>);<span class="pl-c1">this</span>.<span class="pl-en">flush</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}}<span class="pl-k">return</span>}<span class="pl-v">this</span>.head<span class="pl-k">=</span>e<span class="pl-k">=</span>e.<span class="pl-c1">next</span>}<span class="pl-v">this</span>.emit(<span class="pl-s"><span class="pl-pds">&quot;</span>end<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">J</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">emit</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-v">this</span>.events;l<span class="pl-k">&amp;&amp;</span>l[e]<span class="pl-k">&amp;&amp;</span>l[e](k)};<span class="pl-c1">J</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">on</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>.events)<span class="pl-v">this</span>.events<span class="pl-k">=</span>{};<span class="pl-v">this</span>.events[e]<span class="pl-k">=</span>k;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">write</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>.taps;<span class="pl-k">if</span>(k)e<span class="pl-k">=</span>k.<span class="pl-c1">go</span>(e);<span class="pl-v">this</span>.<span class="pl-c1">data</span><span class="pl-k">+=</span>e;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">end</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){e<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.<span class="pl-c1">write</span>(e);<span class="pl-v">this</span>.flushable<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-v">this</span>.root.flush();<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">map</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>(<span class="pl-v">this</span>.root,<span class="pl-v">this</span>.<span class="pl-c1">next</span>,<span class="pl-v">this</span>.taps),l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>(<span class="pl-v">this</span>.root,k,<span class="pl-v">this</span>.taps);<span class="pl-v">this</span>.<span class="pl-c1">next</span><span class="pl-k">=</span>l;<span class="pl-v">this</span>.flushable<span class="pl-k">=</span><span class="pl-c1">true</span>;e(l);<span class="pl-k">return</span> k};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">tap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">var</span> k<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.taps;<span class="pl-v">this</span>.taps<span class="pl-k">=</span>k<span class="pl-k">?</span>k.<span class="pl-c1">push</span>(e)<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">r</span>(e);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">untap</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.taps<span class="pl-k">=</span><span class="pl-v">this</span>.taps.tail;<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">return</span> e(<span class="pl-v">this</span>,k)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">reference</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">x</span>){<span class="pl-k">if</span>(<span class="pl-k">typeof</span> e<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>function<span class="pl-pds">&quot;</span></span>){e<span class="pl-k">=</span>e(<span class="pl-v">this</span>,k,<span class="pl-c1">null</span>,{auto<span class="pl-k">:</span>l,filters<span class="pl-k">:</span>x});<span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> B)<span class="pl-k">return</span> e}<span class="pl-k">return</span> o.isEmpty(e)<span class="pl-k">?</span>this<span class="pl-k">:</span><span class="pl-v">this</span>.<span class="pl-c1">write</span>(o.filter(e,l,x))};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">section</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">x</span>){<span class="pl-k">if</span>(<span class="pl-k">typeof</span> e<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>function<span class="pl-pds">&quot;</span></span>){e<span class="pl-k">=</span>e(<span class="pl-v">this</span>,k,l,x);<span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> B)<span class="pl-k">return</span> e}<span class="pl-k">var</span> C<span class="pl-k">=</span>l.block;l<span class="pl-k">=</span>l[<span class="pl-s"><span class="pl-pds">&quot;</span>else<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(x)k<span class="pl-k">=</span>k.<span class="pl-c1">push</span>(x);</td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(o.isArray(e)){<span class="pl-k">if</span>(C){x<span class="pl-k">=</span>e.<span class="pl-c1">length</span>;l<span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> E<span class="pl-k">=</span><span class="pl-c1">0</span>;E<span class="pl-k">&lt;</span>x;E<span class="pl-k">++</span>)l<span class="pl-k">=</span>C(l,k.<span class="pl-c1">push</span>(e[E],E,x));<span class="pl-k">return</span> l}}<span class="pl-k">else</span> <span class="pl-k">if</span>(e<span class="pl-k">===</span><span class="pl-c1">true</span>){<span class="pl-k">if</span>(C)<span class="pl-k">return</span> C(<span class="pl-v">this</span>,k)}<span class="pl-k">else</span> <span class="pl-k">if</span>(e<span class="pl-k">||</span>e<span class="pl-k">===</span><span class="pl-c1">0</span>){<span class="pl-k">if</span>(C)<span class="pl-k">return</span> C(<span class="pl-v">this</span>,k.<span class="pl-c1">push</span>(e))}<span class="pl-k">else</span> <span class="pl-k">if</span>(l)<span class="pl-k">return</span> l(<span class="pl-v">this</span>,k);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">exists</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">var</span> x<span class="pl-k">=</span>l.block;l<span class="pl-k">=</span>l[<span class="pl-s"><span class="pl-pds">&quot;</span>else<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(o.isEmpty(e)){<span class="pl-k">if</span>(l)<span class="pl-k">return</span> l(<span class="pl-v">this</span>,k)}<span class="pl-k">else</span> <span class="pl-k">if</span>(x)<span class="pl-k">return</span> x(<span class="pl-v">this</span>,k);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">notexists</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">var</span> x<span class="pl-k">=</span>l.block;l<span class="pl-k">=</span>l[<span class="pl-s"><span class="pl-pds">&quot;</span>else<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(o.isEmpty(e)){<span class="pl-k">if</span>(x)<span class="pl-k">return</span> x(<span class="pl-v">this</span>,k)}<span class="pl-k">else</span> <span class="pl-k">if</span>(l)<span class="pl-k">return</span> l(<span class="pl-v">this</span>,k);<span class="pl-k">return</span> <span class="pl-v">this</span>};</td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">block</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){l<span class="pl-k">=</span>l.block;<span class="pl-k">if</span>(e)l<span class="pl-k">=</span>e;<span class="pl-k">if</span>(l)<span class="pl-k">return</span> l(<span class="pl-v">this</span>,k);<span class="pl-k">return</span> <span class="pl-v">this</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">partial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>){<span class="pl-k">if</span>(<span class="pl-k">typeof</span> e<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>function<span class="pl-pds">&quot;</span></span>)<span class="pl-k">return</span> <span class="pl-v">this</span>.capture(e,k,<span class="pl-k">function</span>(<span class="pl-smi">l</span>,<span class="pl-smi">x</span>){o.<span class="pl-c1">load</span>(l,x,k).end()});<span class="pl-k">return</span> o.<span class="pl-c1">load</span>(e,<span class="pl-v">this</span>,k)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">helper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>,<span class="pl-smi">x</span>){<span class="pl-k">return</span> o.helpers[e](<span class="pl-v">this</span>,k,l,x)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">capture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.map(<span class="pl-k">function</span>(<span class="pl-smi">x</span>){<span class="pl-k">var</span> C<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>(<span class="pl-k">function</span>(<span class="pl-smi">E</span>,<span class="pl-smi">M</span>){E<span class="pl-k">?</span>x.setError(E)<span class="pl-k">:</span>l(M,x)});e(C.head,k).end()})};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setError</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-v">this</span><span class="pl-c1">.error</span><span class="pl-k">=</span>e;<span class="pl-v">this</span>.root.flush();</td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-v">this</span>};o.helpers<span class="pl-k">=</span>{<span class="pl-en">sep</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">if</span>(k.stack.<span class="pl-c1">index</span><span class="pl-k">===</span>k.stack.of<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">return</span> e;<span class="pl-k">return</span> l.block(e,k)},<span class="pl-en">idx</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>,<span class="pl-smi">k</span>,<span class="pl-smi">l</span>){<span class="pl-k">return</span> l.block(e,k.<span class="pl-c1">push</span>(k.stack.<span class="pl-c1">index</span>))}};<span class="pl-c1">r</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">push</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">r</span>(e,<span class="pl-v">this</span>)};<span class="pl-c1">r</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">go</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-v">this</span>;k;){e<span class="pl-k">=</span>k.head(e);k<span class="pl-k">=</span>k.tail}<span class="pl-k">return</span> e};<span class="pl-k">var</span> K<span class="pl-k">=</span><span class="pl-c1">RegExp</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-c1">[&amp;&lt;&gt;<span class="pl-cce">\&quot;</span>]</span><span class="pl-pds">/</span></span>),q<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>&amp;<span class="pl-pds">/</span>g</span>,j<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>&lt;<span class="pl-pds">/</span>g</span>,w<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>&gt;<span class="pl-pds">/</span>g</span>,t<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\&quot;</span><span class="pl-pds">/</span>g</span>;<span class="pl-c1">o</span>.<span class="pl-en">escapeHtml</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">if</span>(<span class="pl-k">typeof</span> e<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>K.<span class="pl-c1">test</span>(e))<span class="pl-k">return</span> e;<span class="pl-k">return</span> e.<span class="pl-c1">replace</span>(q,<span class="pl-s"><span class="pl-pds">&quot;</span>&amp;amp;<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(j,<span class="pl-s"><span class="pl-pds">&quot;</span>&amp;lt;<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(w,<span class="pl-s"><span class="pl-pds">&quot;</span>&amp;gt;<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(t,<span class="pl-s"><span class="pl-pds">&quot;</span>&amp;quot;<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">return</span> e};</td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> y<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\\</span><span class="pl-pds">/</span>g</span>,A<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\r</span><span class="pl-pds">/</span>g</span>,F<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\u</span>2028<span class="pl-pds">/</span>g</span>,L<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\u</span>2029<span class="pl-pds">/</span>g</span>,N<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\n</span><span class="pl-pds">/</span>g</span>,V<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\f</span><span class="pl-pds">/</span>g</span>,I<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>&#39;<span class="pl-pds">/</span>g</span>,Q<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>&quot;<span class="pl-pds">/</span>g</span>,T<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\t</span><span class="pl-pds">/</span>g</span>;<span class="pl-c1">o</span>.<span class="pl-en">escapeJs</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){<span class="pl-k">if</span>(<span class="pl-k">typeof</span> e<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>)<span class="pl-k">return</span> e.<span class="pl-c1">replace</span>(y,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\\\</span><span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(Q,<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span>&quot;<span class="pl-pds">&#39;</span></span>).<span class="pl-c1">replace</span>(I,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>&#39;<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(A,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>r<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(F,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>u2028<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(L,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>u2029<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(N,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>n<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(V,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>f<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(T,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>t<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> e}})(dust);<span class="pl-k">if</span>(<span class="pl-k">typeof</span> <span class="pl-c1">exports</span><span class="pl-k">!==</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>){<span class="pl-k">typeof</span> <span class="pl-c1">process</span><span class="pl-k">!==</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>./server<span class="pl-pds">&quot;</span></span>)(dust);<span class="pl-c1">module</span>.exports<span class="pl-k">=</span>dust}</td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">o</span>){<span class="pl-k">function</span> <span class="pl-en">z</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>[j[<span class="pl-c1">0</span>]],t<span class="pl-k">=</span><span class="pl-c1">1</span>,y<span class="pl-k">=</span>j.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>y;t<span class="pl-k">++</span>){<span class="pl-k">var</span> A<span class="pl-k">=</span>o.filterNode(q,j[t]);A<span class="pl-k">&amp;&amp;</span>w.<span class="pl-c1">push</span>(A)}<span class="pl-k">return</span> w}<span class="pl-k">function</span> <span class="pl-en">H</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> j}<span class="pl-k">function</span> <span class="pl-en">p</span>(){}<span class="pl-k">function</span> <span class="pl-en">J</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,t<span class="pl-k">=</span><span class="pl-c1">1</span>,y<span class="pl-k">=</span>j.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>y;t<span class="pl-k">++</span>)w<span class="pl-k">+=</span>o.compileNode(q,j[t]);<span class="pl-k">return</span> w}<span class="pl-k">function</span> <span class="pl-en">B</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>,<span class="pl-smi">w</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">1</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">4</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">3</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>}<span class="pl-c1">o</span>.<span class="pl-en">compile</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">var</span> w,t<span class="pl-k">=</span>o.<span class="pl-c1">parse</span>(q);w<span class="pl-k">=</span>o.filterNode({},t);t<span class="pl-k">=</span>{name<span class="pl-k">:</span>j,bodies<span class="pl-k">:</span>[],blocks<span class="pl-k">:</span>{},index<span class="pl-k">:</span><span class="pl-c1">0</span>,auto<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>h<span class="pl-pds">&quot;</span></span>};w<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>(function(){dust.register(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line">(j<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>j<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>null<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(t,w)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>);<span class="pl-pds">&quot;</span></span>;<span class="pl-k">var</span> y;<span class="pl-k">var</span> A<span class="pl-k">=</span>[],F<span class="pl-k">=</span>t.blocks;<span class="pl-k">for</span>(y <span class="pl-k">in</span> F)A.<span class="pl-c1">push</span>(y<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>F[y]);<span class="pl-k">if</span>(A.<span class="pl-c1">length</span>){t.blocks<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ctx=ctx.shiftBlocks(blocks);<span class="pl-pds">&quot;</span></span>;y<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>var blocks={<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>A.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>};<span class="pl-pds">&quot;</span></span>}<span class="pl-k">else</span> y<span class="pl-k">=</span>t.blocks<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;y<span class="pl-k">=</span>w<span class="pl-k">+</span>y;w<span class="pl-k">=</span>[];A<span class="pl-k">=</span>t.bodies;t<span class="pl-k">=</span>t.blocks;F<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> L<span class="pl-k">=</span>A.<span class="pl-c1">length</span>;F<span class="pl-k">&lt;</span>L;F<span class="pl-k">++</span>)w[F]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>function body_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>F<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>(chk,ctx){<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>t<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>return chk<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>A[F]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>;}<span class="pl-pds">&quot;</span></span>;t<span class="pl-k">=</span>w.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> y<span class="pl-k">+</span>t<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>return body_0;})();<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">o</span>.<span class="pl-en">filterNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> o.optimizers[j[<span class="pl-c1">0</span>]](q,j)};o.optimizers<span class="pl-k">=</span>{<span class="pl-en">body</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>[j[<span class="pl-c1">0</span>]],t,y<span class="pl-k">=</span><span class="pl-c1">1</span>,A<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">j.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span>A;y<span class="pl-k">++</span>){<span class="pl-k">var</span> F<span class="pl-k">=</span>o.filterNode(q,j[y]);<span class="pl-k">if</span>(F)<span class="pl-k">if</span>(F[<span class="pl-c1">0</span>]<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>buffer<span class="pl-pds">&quot;</span></span>)<span class="pl-k">if</span>(t)t[<span class="pl-c1">1</span>]<span class="pl-k">+=</span>F[<span class="pl-c1">1</span>];<span class="pl-k">else</span>{t<span class="pl-k">=</span>F;w.<span class="pl-c1">push</span>(F)}<span class="pl-k">else</span>{t<span class="pl-k">=</span><span class="pl-c1">null</span>;w.<span class="pl-c1">push</span>(F)}}<span class="pl-k">return</span> w},buffer<span class="pl-k">:</span>H,<span class="pl-en">special</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>buffer<span class="pl-pds">&quot;</span></span>,r[j[<span class="pl-c1">1</span>]]]},format<span class="pl-k">:</span>p,reference<span class="pl-k">:</span>z,<span class="pl-s"><span class="pl-pds">&quot;</span>#<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>z,<span class="pl-s"><span class="pl-pds">&quot;</span>?<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>z,<span class="pl-s"><span class="pl-pds">&quot;</span>^<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>z,<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>z,<span class="pl-s"><span class="pl-pds">&quot;</span>+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>z,<span class="pl-s"><span class="pl-pds">&quot;</span>@<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>z,<span class="pl-s"><span class="pl-pds">&quot;</span>%<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>z,partial<span class="pl-k">:</span>z,context<span class="pl-k">:</span>z,params<span class="pl-k">:</span>z,bodies<span class="pl-k">:</span>z,param<span class="pl-k">:</span>z,filters<span class="pl-k">:</span>H,key<span class="pl-k">:</span>H,path<span class="pl-k">:</span>H,literal<span class="pl-k">:</span>H,comment<span class="pl-k">:</span>p};o.pragmas<span class="pl-k">=</span>{<span class="pl-en">esc</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>,<span class="pl-smi">w</span>){<span class="pl-k">var</span> t<span class="pl-k">=</span>q.auto;j<span class="pl-k">||</span>(j<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>h<span class="pl-pds">&quot;</span></span>);q.auto<span class="pl-k">=</span>j<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>s<span class="pl-pds">&quot;</span></span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>j;j<span class="pl-k">=</span>J(q,w.block);q.auto<span class="pl-k">=</span>t;<span class="pl-k">return</span> j}};<span class="pl-k">var</span> r<span class="pl-k">=</span>{s<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>,n<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>,r<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>,lb<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>{<span class="pl-pds">&quot;</span></span>,rb<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>};o.compileNode<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> o.nodes[j[<span class="pl-c1">0</span>]](q,j)};o.nodes<span class="pl-k">=</span>{<span class="pl-en">body</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>q.<span class="pl-c1">index</span><span class="pl-k">++</span>,t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>body_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w;q.bodies[w]<span class="pl-k">=</span>J(q,j);<span class="pl-k">return</span> t},<span class="pl-en">buffer</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>.write(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>K(j[<span class="pl-c1">1</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-en">format</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>.write(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>K(j[<span class="pl-c1">1</span>]<span class="pl-k">+</span>j[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-en">reference</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>.reference(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">1</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,ctx,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">#</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> B(q,j,<span class="pl-s"><span class="pl-pds">&quot;</span>section<span class="pl-pds">&quot;</span></span>)},<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">?</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> B(q,j,<span class="pl-s"><span class="pl-pds">&quot;</span>exists<span class="pl-pds">&quot;</span></span>)},<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">^</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> B(q,j,<span class="pl-s"><span class="pl-pds">&quot;</span>notexists<span class="pl-pds">&quot;</span></span>)},<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">&lt;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>j[<span class="pl-c1">4</span>],t<span class="pl-k">=</span><span class="pl-c1">1</span>,y<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line">w.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>y;t<span class="pl-k">++</span>){<span class="pl-k">var</span> A<span class="pl-k">=</span>w[t];<span class="pl-k">if</span>(A[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>block<span class="pl-pds">&quot;</span></span>){q.blocks[j[<span class="pl-c1">1</span>].<span class="pl-c1">text</span>]<span class="pl-k">=</span>o.compileNode(q,A[<span class="pl-c1">2</span>]);<span class="pl-k">break</span>}}<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>},<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">+</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>.block(ctx.getBlock(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>K(j[<span class="pl-c1">1</span>].<span class="pl-c1">text</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>),<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">4</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">3</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">@</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>.helper(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>K(j[<span class="pl-c1">1</span>].<span class="pl-c1">text</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">4</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">3</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">%</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span>j[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span>o.pragmas[w])<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span>j[<span class="pl-c1">4</span>],y<span class="pl-k">=</span>{},A<span class="pl-k">=</span><span class="pl-c1">1</span>,F<span class="pl-k">=</span>t.<span class="pl-c1">length</span>;A<span class="pl-k">&lt;</span>F;A<span class="pl-k">++</span>){<span class="pl-k">var</span> L<span class="pl-k">=</span>t[A];y[L[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line">L[<span class="pl-c1">2</span>]}t<span class="pl-k">=</span>j[<span class="pl-c1">3</span>];L<span class="pl-k">=</span>{};A<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(F<span class="pl-k">=</span>t.<span class="pl-c1">length</span>;A<span class="pl-k">&lt;</span>F;A<span class="pl-k">++</span>){<span class="pl-k">var</span> N<span class="pl-k">=</span>t[A];L[N[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]]<span class="pl-k">=</span>N[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>]}<span class="pl-k">return</span> o.pragmas[w](q,j[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>]<span class="pl-k">?</span>j[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>].<span class="pl-c1">text</span><span class="pl-k">:</span><span class="pl-c1">null</span>,y,L)},<span class="pl-en">partial</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>.partial(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">1</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-en">context</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j[<span class="pl-c1">1</span>])<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>ctx.rebase(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">1</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>;<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>ctx<span class="pl-pds">&quot;</span></span>},<span class="pl-en">params</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>[],t<span class="pl-k">=</span><span class="pl-c1">1</span>,y<span class="pl-k">=</span>j.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>y;t<span class="pl-k">++</span>)w.<span class="pl-c1">push</span>(o.compileNode(q,j[t]));<span class="pl-k">if</span>(w.<span class="pl-c1">length</span>)<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>{<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>;<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>null<span class="pl-pds">&quot;</span></span>},<span class="pl-en">bodies</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>[],t<span class="pl-k">=</span><span class="pl-c1">1</span>,y<span class="pl-k">=</span>j.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line">y;t<span class="pl-k">++</span>)w.<span class="pl-c1">push</span>(o.compileNode(q,j[t]));<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>{<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>},<span class="pl-en">param</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> o.compileNode(q,j[<span class="pl-c1">1</span>])<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>o.compileNode(q,j[<span class="pl-c1">2</span>])},<span class="pl-en">filters</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>[],t<span class="pl-k">=</span><span class="pl-c1">1</span>,y<span class="pl-k">=</span>j.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>y;t<span class="pl-k">++</span>)w.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>j[t]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>);<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>q.auto<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>(w.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>,[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)},<span class="pl-en">key</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&#39;</span>ctx.get(&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>j[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;)<span class="pl-pds">&#39;</span></span>},<span class="pl-en">path</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span>j[<span class="pl-c1">1</span>],t<span class="pl-k">=</span>j[<span class="pl-c1">2</span>],y<span class="pl-k">=</span>[],A<span class="pl-k">=</span><span class="pl-c1">0</span>,F<span class="pl-k">=</span>t.<span class="pl-c1">length</span>;A<span class="pl-k">&lt;</span>F;A<span class="pl-k">++</span>)y.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>t[A]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>);<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>ctx.getPath(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>w<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>y.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>])<span class="pl-pds">&quot;</span></span>},<span class="pl-en">literal</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>,<span class="pl-smi">j</span>){<span class="pl-k">return</span> K(j[<span class="pl-c1">1</span>])}};<span class="pl-k">var</span> K<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line"><span class="pl-k">typeof</span> <span class="pl-c1">JSON</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">?</span><span class="pl-k">function</span>(<span class="pl-smi">q</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>o.escapeJs(q)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>}<span class="pl-k">:</span><span class="pl-c1">JSON</span>.stringify})(<span class="pl-k">typeof</span> <span class="pl-c1">exports</span><span class="pl-k">!==</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">?</span>exports<span class="pl-k">:</span><span class="pl-c1">window</span>.dust);</td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">o</span>){<span class="pl-k">var</span> <span class="pl-en">z</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> H<span class="pl-k">=</span>{<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">function</span> <span class="pl-en">J</span>(<span class="pl-smi">n</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>n.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">0</span>);<span class="pl-k">if</span>(b<span class="pl-k">&lt;</span><span class="pl-c1">255</span>){n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span>{n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>u<span class="pl-pds">&quot;</span></span>;c<span class="pl-k">=</span><span class="pl-c1">4</span>}n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>n;<span class="pl-k">var</span> d<span class="pl-k">=</span>b.<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>).<span class="pl-c1">toUpperCase</span>();b<span class="pl-k">=</span>d;c<span class="pl-k">=</span>c<span class="pl-k">-</span>d.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c;d<span class="pl-k">++</span>)b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b;<span class="pl-k">return</span> n<span class="pl-k">+</span>b}<span class="pl-k">function</span> <span class="pl-en">B</span>(<span class="pl-smi">n</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">+</span>n.<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\\</span><span class="pl-pds">/</span>g</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\\\</span><span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span>&quot;<span class="pl-pds">/</span>g</span>,<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span>&quot;<span class="pl-pds">&#39;</span></span>).<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\r</span><span class="pl-pds">/</span>g</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>r<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\n</span><span class="pl-pds">/</span>g</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>n<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-c1">[<span class="pl-cce">\x</span>8<span class="pl-c1">0-<span class="pl-cce">\u</span></span>FFFF]</span><span class="pl-pds">/</span>g</span>,J)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>}<span class="pl-k">function</span> <span class="pl-en">r</span>(<span class="pl-smi">n</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>(a<span class="pl-k">&lt;</span>R)){<span class="pl-k">if</span>(a<span class="pl-k">&gt;</span>R){R<span class="pl-k">=</span>a;W<span class="pl-k">=</span>[]}W.<span class="pl-c1">push</span>(n)}}<span class="pl-k">function</span> <span class="pl-en">K</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>body@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line">q();c<span class="pl-k">!==</span><span class="pl-c1">null</span>;){b.<span class="pl-c1">push</span>(c);c<span class="pl-k">=</span>q()}b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>body<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">concat</span>(b)<span class="pl-k">:</span><span class="pl-c1">null</span>;v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">q</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>part@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>l();<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{b<span class="pl-k">=</span>j();<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>partial@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a;<span class="pl-k">var</span> c<span class="pl-k">=</span>v[b];<span class="pl-k">if</span>(c){a<span class="pl-k">=</span>c.nextPos;b<span class="pl-k">=</span>c.result}<span class="pl-k">else</span>{c<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span>a,g<span class="pl-k">=</span>C();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>&gt;<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>&gt;<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;&gt;&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span>I();i<span class="pl-k">=</span>i<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,i]<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span>i;<span class="pl-k">else</span>{i<span class="pl-k">=</span>Q();i<span class="pl-k">=</span>i<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>i<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line">y();<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{s<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;/&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(s<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span>E();<span class="pl-k">if</span>(u<span class="pl-k">!==</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span>[g,f,i,m,s,u];<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}d<span class="pl-k">=</span>g<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>partial<span class="pl-pds">&quot;</span></span>,g[<span class="pl-c1">2</span>],g[<span class="pl-c1">3</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>c)<span class="pl-k">&amp;&amp;</span>d<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>partial<span class="pl-pds">&quot;</span></span>);v[b]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>d};b<span class="pl-k">=</span>d}<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{b<span class="pl-k">=</span>L();<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{b<span class="pl-k">=</span>F();<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>buffer@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a;<span class="pl-k">if</span>(c<span class="pl-k">=</span>v[b]){a<span class="pl-k">=</span>c.nextPos;b<span class="pl-k">=</span>c.result}<span class="pl-k">else</span>{c<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;d<span class="pl-k">=</span>a;g<span class="pl-k">=</span>M();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>[];<span class="pl-k">for</span>(i<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line">U();i<span class="pl-k">!==</span><span class="pl-c1">null</span>;){f.<span class="pl-c1">push</span>(i);i<span class="pl-k">=</span>U()}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span>[g,f];<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}d<span class="pl-k">=</span>g<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>format<span class="pl-pds">&quot;</span></span>,g[<span class="pl-c1">0</span>],g[<span class="pl-c1">1</span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)]<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>d;<span class="pl-k">else</span>{i<span class="pl-k">=</span>g<span class="pl-k">=</span>a;f<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;m<span class="pl-k">=</span>x();h<span class="pl-k">=</span>f;<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>i}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){m<span class="pl-k">=</span>a;i<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;s<span class="pl-k">=</span>M();h<span class="pl-k">=</span>i;<span class="pl-k">if</span>(s<span class="pl-k">===</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>m}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){m<span class="pl-k">=</span>a;s<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;u<span class="pl-k">=</span>l();h<span class="pl-k">=</span>s;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">null</span>)s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{s<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>m}<span class="pl-k">if</span>(s<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">length</span><span class="pl-k">&gt;</span>a){m<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{m<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>any character<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span>[f,i,s,m];<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}g<span class="pl-k">=</span>f<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>f[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span>[];g<span class="pl-k">!==</span><span class="pl-c1">null</span>;){d.<span class="pl-c1">push</span>(g);i<span class="pl-k">=</span>g<span class="pl-k">=</span>a;f<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;m<span class="pl-k">=</span>x();h<span class="pl-k">=</span>f;<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>i}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){m<span class="pl-k">=</span>a;i<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;s<span class="pl-k">=</span>M();h<span class="pl-k">=</span>i;<span class="pl-k">if</span>(s<span class="pl-k">===</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>m}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){m<span class="pl-k">=</span>a;s<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;u<span class="pl-k">=</span>l();h<span class="pl-k">=</span>s;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">null</span>)s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{s<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>m}<span class="pl-k">if</span>(s<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">length</span><span class="pl-k">&gt;</span>a){m<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{m<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>any character<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span>[f,i,s,m];<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}g<span class="pl-k">=</span>f<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>f[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">else</span> d<span class="pl-k">=</span><span class="pl-c1">null</span>;d<span class="pl-k">=</span>d<span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>buffer<span class="pl-pds">&quot;</span></span>,d.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)]<span class="pl-k">:</span><span class="pl-c1">null</span>;d<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>}(h<span class="pl-k">=</span>c)<span class="pl-k">&amp;&amp;</span>d<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>buffer<span class="pl-pds">&quot;</span></span>);v[b]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>d};b<span class="pl-k">=</span>d}b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>}}}}}v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">j</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>section@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a,d<span class="pl-k">=</span>w();<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>E();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>K();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span>A();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>t();<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span>d[<span class="pl-c1">1</span>].<span class="pl-c1">text</span><span class="pl-k">===</span>m.<span class="pl-c1">text</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(s<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,f,i,m,s];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span><span class="pl-k">function</span>(<span class="pl-smi">u</span>,<span class="pl-smi">D</span>,<span class="pl-smi">O</span>){O.<span class="pl-c1">push</span>([<span class="pl-s"><span class="pl-pds">&quot;</span>param<span class="pl-pds">&quot;</span></span>,[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>block<span class="pl-pds">&quot;</span></span>],D]);u.<span class="pl-c1">push</span>(O);<span class="pl-k">return</span> u}(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">2</span>],d[<span class="pl-c1">3</span>],d[<span class="pl-c1">4</span>])<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>)c<span class="pl-k">=</span>c;<span class="pl-k">else</span>{c<span class="pl-k">=</span>a;d<span class="pl-k">=</span>w();<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>){g<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;/&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>E();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,f];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span><span class="pl-k">function</span>(<span class="pl-smi">u</span>){u.<span class="pl-c1">push</span>([<span class="pl-s"><span class="pl-pds">&quot;</span>bodies<span class="pl-pds">&quot;</span></span>]);<span class="pl-k">return</span> u}(d[<span class="pl-c1">0</span>])<span class="pl-k">:</span><span class="pl-c1">null</span>;c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">null</span>}(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>section<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">w</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>sec_tag_start@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line">a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>a;<span class="pl-k">var</span> c<span class="pl-k">=</span>C();<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[#?^&lt;+@%]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>[#?^&lt;+@%]<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>N();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>y();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> i;i<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>params@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a;<span class="pl-k">var</span> m<span class="pl-k">=</span>v[i];<span class="pl-k">if</span>(m){a<span class="pl-k">=</span>m.nextPos;i<span class="pl-k">=</span>m.result}<span class="pl-k">else</span>{m<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span>[],u<span class="pl-k">=</span>a,D<span class="pl-k">=</span>U();<span class="pl-k">if</span>(D<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> O<span class="pl-k">=</span>I();<span class="pl-k">if</span>(O<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>=<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> P<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>=<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{P<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;=&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(P<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> G<span class="pl-k">=</span>N();<span class="pl-k">if</span>(G<span class="pl-k">!==</span><span class="pl-c1">null</span>)G<span class="pl-k">=</span>G;<span class="pl-k">else</span>{G<span class="pl-k">=</span>Q();G<span class="pl-k">=</span>G<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>G<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">if</span>(G<span class="pl-k">!==</span><span class="pl-c1">null</span>)D<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line">[D,O,P,G];<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}}<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}}<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}}<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}<span class="pl-k">for</span>(u<span class="pl-k">=</span>D<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>param<span class="pl-pds">&quot;</span></span>,[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,D[<span class="pl-c1">1</span>]],D[<span class="pl-c1">3</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>;u<span class="pl-k">!==</span><span class="pl-c1">null</span>;){s.<span class="pl-c1">push</span>(u);u<span class="pl-k">=</span>a;D<span class="pl-k">=</span>U();<span class="pl-k">if</span>(D<span class="pl-k">!==</span><span class="pl-c1">null</span>){O<span class="pl-k">=</span>I();<span class="pl-k">if</span>(O<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>=<span class="pl-pds">&quot;</span></span>){P<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>=<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{P<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;=&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(P<span class="pl-k">!==</span><span class="pl-c1">null</span>){G<span class="pl-k">=</span>N();<span class="pl-k">if</span>(G<span class="pl-k">!==</span><span class="pl-c1">null</span>)G<span class="pl-k">=</span>G;<span class="pl-k">else</span>{G<span class="pl-k">=</span>Q();G<span class="pl-k">=</span>G<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>G<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">if</span>(G<span class="pl-k">!==</span><span class="pl-c1">null</span>)D<span class="pl-k">=</span>[D,O,P,G];<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}}<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}}<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}}<span class="pl-k">else</span>{D<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>u}u<span class="pl-k">=</span>D<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>param<span class="pl-pds">&quot;</span></span>,[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,D[<span class="pl-c1">1</span>]],D[<span class="pl-c1">3</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>}s<span class="pl-k">=</span>s<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>params<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">concat</span>(s)<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>m)<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>params<span class="pl-pds">&quot;</span></span>);v[i]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>s};i<span class="pl-k">=</span>s}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)c<span class="pl-k">=</span>[c,d,g,f,i];<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}b<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[c[<span class="pl-c1">1</span>],c[<span class="pl-c1">2</span>],c[<span class="pl-c1">3</span>],c[<span class="pl-c1">4</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>;v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">t</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>end_tag@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a,d<span class="pl-k">=</span>C();<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;/&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>N();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span>E();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,f,i];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>d[<span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>end tag<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">y</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>context@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;:&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>N();<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>)c<span class="pl-k">=</span>[c,d];<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}b<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>c[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>b<span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>context<span class="pl-pds">&quot;</span></span>,b]<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>context<span class="pl-pds">&quot;</span></span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">A</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>bodies@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line">b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>a,g<span class="pl-k">=</span>C();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;:&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span>I();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>E();<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span>K();<span class="pl-k">if</span>(s<span class="pl-k">!==</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span>[g,f,i,m,s];<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}<span class="pl-k">for</span>(d<span class="pl-k">=</span>g<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>param<span class="pl-pds">&quot;</span></span>,[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,g[<span class="pl-c1">2</span>]],g[<span class="pl-c1">4</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>;d<span class="pl-k">!==</span><span class="pl-c1">null</span>;){c.<span class="pl-c1">push</span>(d);d<span class="pl-k">=</span>a;g<span class="pl-k">=</span>C();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span>){f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;:&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){i<span class="pl-k">=</span>I();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line">E();<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){s<span class="pl-k">=</span>K();<span class="pl-k">if</span>(s<span class="pl-k">!==</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span>[g,f,i,m,s];<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}d<span class="pl-k">=</span>g<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>param<span class="pl-pds">&quot;</span></span>,[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,g[<span class="pl-c1">2</span>]],g[<span class="pl-c1">4</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>}c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>bodies<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">concat</span>(c)<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>bodies<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">F</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>reference@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a,d<span class="pl-k">=</span>C();<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>N();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f;f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>filters@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a;<span class="pl-k">var</span> i<span class="pl-k">=</span>v[f];<span class="pl-k">if</span>(i){a<span class="pl-k">=</span>i.nextPos;f<span class="pl-k">=</span>i.result}<span class="pl-k">else</span>{i<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line">[],s<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>|<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>|<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{u<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;|&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(u<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> D<span class="pl-k">=</span>I();<span class="pl-k">if</span>(D<span class="pl-k">!==</span><span class="pl-c1">null</span>)u<span class="pl-k">=</span>[u,D];<span class="pl-k">else</span>{u<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>s}}<span class="pl-k">else</span>{u<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>s}<span class="pl-k">for</span>(s<span class="pl-k">=</span>u<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>u[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;s<span class="pl-k">!==</span><span class="pl-c1">null</span>;){m.<span class="pl-c1">push</span>(s);s<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>|<span class="pl-pds">&quot;</span></span>){u<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>|<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{u<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;|&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(u<span class="pl-k">!==</span><span class="pl-c1">null</span>){D<span class="pl-k">=</span>I();<span class="pl-k">if</span>(D<span class="pl-k">!==</span><span class="pl-c1">null</span>)u<span class="pl-k">=</span>[u,D];<span class="pl-k">else</span>{u<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>s}}<span class="pl-k">else</span>{u<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>s}s<span class="pl-k">=</span>u<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>u[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>}m<span class="pl-k">=</span>m<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>filters<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">concat</span>(m)<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>i)<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>filters<span class="pl-pds">&quot;</span></span>);v[f]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>m};f<span class="pl-k">=</span>m}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){i<span class="pl-k">=</span>E();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,f,i];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>reference<span class="pl-pds">&quot;</span></span>,d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>reference<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">L</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>special@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a,d<span class="pl-k">=</span>C();<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>~<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>~<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;~&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>I();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span>E();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,f,i];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>special<span class="pl-pds">&quot;</span></span>,d[<span class="pl-c1">2</span>]]<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>special<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">N</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>identifier@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>V();c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>X([<span class="pl-s"><span class="pl-pds">&quot;</span>path<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">concat</span>(c),n)<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>)c<span class="pl-k">=</span>c;<span class="pl-k">else</span>{c<span class="pl-k">=</span>I();c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>X([<span class="pl-s"><span class="pl-pds">&quot;</span>key<span class="pl-pds">&quot;</span></span>,c],n)<span class="pl-k">:</span><span class="pl-c1">null</span>;c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">null</span>}(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>identifier<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">V</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>path@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a,d<span class="pl-k">=</span>I();d<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;.&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span>I();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span>[f,i];<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}g<span class="pl-k">=</span>f<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>f[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>[];g<span class="pl-k">!==</span><span class="pl-c1">null</span>;){m.<span class="pl-c1">push</span>(g);g<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>){f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;.&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>){i<span class="pl-k">=</span>I();<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span>[f,i];<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}g<span class="pl-k">=</span>f<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>f[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">else</span> m<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,m];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span><span class="pl-k">function</span>(<span class="pl-smi">s</span>,<span class="pl-smi">u</span>){<span class="pl-k">if</span>(s){u.<span class="pl-c1">unshift</span>(s);<span class="pl-k">return</span>[<span class="pl-c1">false</span>,u]}<span class="pl-k">return</span>[<span class="pl-c1">true</span>,u]}(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>])<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c<span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>)c<span class="pl-k">=</span>c;<span class="pl-k">else</span>{<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>){c<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;.&quot;<span class="pl-pds">&#39;</span></span>)}c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-c1">true</span>,[]]<span class="pl-k">:</span><span class="pl-c1">null</span>;c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">null</span>}(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>path<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">I</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>key@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[<span class="pl-c1">a-zA-Z</span>_$]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>[a-zA-Z_$]<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>[];<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[<span class="pl-c1">0-9a-zA-Z</span>_$]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>[0-9a-zA-Z_$]<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">for</span>(;f<span class="pl-k">!==</span><span class="pl-c1">null</span>;){g.<span class="pl-c1">push</span>(f);</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[<span class="pl-c1">0-9a-zA-Z</span>_$]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>[0-9a-zA-Z_$]<span class="pl-pds">&quot;</span></span>)}}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>d[<span class="pl-c1">0</span>]<span class="pl-k">+</span>d[<span class="pl-c1">1</span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>key<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">Q</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>inline@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>&quot;&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>&quot;&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,</td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line">g];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>)c<span class="pl-k">=</span>c;<span class="pl-k">else</span>{c<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>){d<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>&quot;&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){g<span class="pl-k">=</span>e();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>&quot;&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,f];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>,d[<span class="pl-c1">1</span>]]<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>)c<span class="pl-k">=</span>c;<span class="pl-k">else</span>{c<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>){d<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>&quot;&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>T();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(g<span class="pl-k">=</span>[];f<span class="pl-k">!==</span><span class="pl-c1">null</span>;){g.<span class="pl-c1">push</span>(f);</td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=</span>T()}<span class="pl-k">else</span> g<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>){f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>&quot;&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,f];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>body<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">concat</span>(d[<span class="pl-c1">1</span>])<span class="pl-k">:</span><span class="pl-c1">null</span>;c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">null</span>}}(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>inline<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">T</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>inline_part@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>L();<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{b<span class="pl-k">=</span>F();<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{b<span class="pl-k">=</span>e();b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>buffer<span class="pl-pds">&quot;</span></span>,b]<span class="pl-k">:</span><span class="pl-c1">null</span>;b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>}}v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}</td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">e</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>literal@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a,d<span class="pl-k">=</span>a,g<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span>x();h<span class="pl-k">=</span>g;<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>a;d<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> i<span class="pl-k">=</span>M();h<span class="pl-k">=</span>d;<span class="pl-k">if</span>(i<span class="pl-k">===</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>k();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span>f;<span class="pl-k">else</span>{<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[<span class="pl-k">^</span>&quot;]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>[^&quot;]<span class="pl-pds">&#39;</span></span>)}f<span class="pl-k">=</span>f<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span>[g,d,f];<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>g<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>g[<span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>[];c<span class="pl-k">!==</span><span class="pl-c1">null</span>;){m.<span class="pl-c1">push</span>(c);</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">=</span>c<span class="pl-k">=</span>a;g<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;f<span class="pl-k">=</span>x();h<span class="pl-k">=</span>g;<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>d}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>a;d<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;i<span class="pl-k">=</span>M();h<span class="pl-k">=</span>d;<span class="pl-k">if</span>(i<span class="pl-k">===</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>k();<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)f<span class="pl-k">=</span>f;<span class="pl-k">else</span>{<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[<span class="pl-k">^</span>&quot;]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>[^&quot;]<span class="pl-pds">&#39;</span></span>)}f<span class="pl-k">=</span>f<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)g<span class="pl-k">=</span>[g,d,f];<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>g<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>g[<span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">else</span> m<span class="pl-k">=</span><span class="pl-c1">null</span>;m<span class="pl-k">=</span>m<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>m.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>literal<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>m};<span class="pl-k">return</span> m}<span class="pl-k">function</span> <span class="pl-en">k</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>esc@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];</td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">2</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span>&quot;<span class="pl-pds">&#39;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span>&quot;<span class="pl-pds">&#39;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\\\\\</span>&quot;&quot;<span class="pl-pds">&#39;</span></span>)}b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span><span class="pl-c1">null</span>;v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">l</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>comment@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>a;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">2</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>{!<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>{!<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;{!&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>[],f<span class="pl-k">=</span>a,i<span class="pl-k">=</span>a,m<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">2</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>!}<span class="pl-pds">&quot;</span></span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>!}<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span>{s<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;!}&quot;<span class="pl-pds">&#39;</span></span>)}h<span class="pl-k">=</span>m;<span class="pl-k">if</span>(s<span class="pl-k">===</span><span class="pl-c1">null</span>)m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{m<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>i}<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">length</span><span class="pl-k">&gt;</span>a){i<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">++</span>}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>any character<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span>[m,i];<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}<span class="pl-k">for</span>(f<span class="pl-k">=</span>i<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>i[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>;f<span class="pl-k">!==</span><span class="pl-c1">null</span>;){g.<span class="pl-c1">push</span>(f);i<span class="pl-k">=</span>f<span class="pl-k">=</span>a;m<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">2</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>!}<span class="pl-pds">&quot;</span></span>){s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>!}<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span>{s<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;!}&quot;<span class="pl-pds">&#39;</span></span>)}h<span class="pl-k">=</span>m;<span class="pl-k">if</span>(s<span class="pl-k">===</span><span class="pl-c1">null</span>)m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{m<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>i}<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">length</span><span class="pl-k">&gt;</span>a){i<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>any character<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span>[m,i];<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}f<span class="pl-k">=</span>i<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>i[<span class="pl-c1">1</span>]<span class="pl-k">:</span><span class="pl-c1">null</span>}<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">2</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>!}<span class="pl-pds">&quot;</span></span>){f<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>!}<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;!}&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)d<span class="pl-k">=</span>[d,g,</td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line">f];<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c}c<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>comment<span class="pl-pds">&quot;</span></span>,d[<span class="pl-c1">1</span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)]<span class="pl-k">:</span><span class="pl-c1">null</span>;(h<span class="pl-k">=</span>b)<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>comment<span class="pl-pds">&quot;</span></span>);v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>c};<span class="pl-k">return</span> c}<span class="pl-k">function</span> <span class="pl-en">x</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>tag@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}b<span class="pl-k">=</span>a;<span class="pl-k">var</span> c<span class="pl-k">=</span>C();<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[#?^&gt;&lt;+%:@<span class="pl-cce">\/</span>~%]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>[#?^&gt;&lt;+%:@<span class="pl-cce">\\</span>/~%]<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(d<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a,f<span class="pl-k">=</span>a,i<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> m<span class="pl-k">=</span>E();h<span class="pl-k">=</span>i;<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>a;m<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span>M();h<span class="pl-k">=</span>m;<span class="pl-k">if</span>(s<span class="pl-k">===</span><span class="pl-c1">null</span>)m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{m<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">length</span><span class="pl-k">&gt;</span>a){f<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>any character<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span>[i,m,f];<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span>[];i<span class="pl-k">!==</span><span class="pl-c1">null</span>;){u.<span class="pl-c1">push</span>(i);f<span class="pl-k">=</span>g<span class="pl-k">=</span>a;i<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;m<span class="pl-k">=</span>E();h<span class="pl-k">=</span>i;<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}<span class="pl-k">if</span>(i<span class="pl-k">!==</span><span class="pl-c1">null</span>){f<span class="pl-k">=</span>a;m<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">false</span>;s<span class="pl-k">=</span>M();h<span class="pl-k">=</span>m;<span class="pl-k">if</span>(s<span class="pl-k">===</span><span class="pl-c1">null</span>)m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span>{m<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>f}<span class="pl-k">if</span>(m<span class="pl-k">!==</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(p.<span class="pl-c1">length</span><span class="pl-k">&gt;</span>a){f<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>any character<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-c1">null</span>)i<span class="pl-k">=</span>[i,m,f];<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span>{i<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>g}}<span class="pl-k">else</span> u<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;<span class="pl-k">if</span>(u<span class="pl-k">!==</span><span class="pl-c1">null</span>){g<span class="pl-k">=</span>E();<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-c1">null</span>)c<span class="pl-k">=</span>[c,d,u,g];<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>b}<span class="pl-k">if</span>(c<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>c;<span class="pl-k">else</span>{b<span class="pl-k">=</span>F();b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>}v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">C</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ld@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>{<span class="pl-pds">&quot;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>{<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;{&quot;<span class="pl-pds">&#39;</span></span>)}v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">E</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>rd@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;}&quot;<span class="pl-pds">&#39;</span></span>)}v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">M</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>eol@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>n&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">2</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>r<span class="pl-cce">\\</span>n&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>r&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\u</span>2028<span class="pl-pds">&quot;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\u</span>2028<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>u2028&quot;<span class="pl-pds">&#39;</span></span>)}<span class="pl-k">if</span>(b<span class="pl-k">!==</span><span class="pl-c1">null</span>)b<span class="pl-k">=</span>b;<span class="pl-k">else</span>{<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\u</span>2029<span class="pl-pds">&quot;</span></span>){b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\u</span>2029<span class="pl-pds">&quot;</span></span>;a<span class="pl-k">+=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-cce">\\</span>u2029&quot;<span class="pl-pds">&#39;</span></span>)}b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">!==</span><span class="pl-c1">null</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>}}}}v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">U</span>(){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>ws@<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a,b<span class="pl-k">=</span>v[n];<span class="pl-k">if</span>(b){a<span class="pl-k">=</span>b.nextPos;<span class="pl-k">return</span> b.result}<span class="pl-k">if</span>(p.<span class="pl-c1">substr</span>(a).<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[<span class="pl-cce">\t\u</span>000b<span class="pl-cce">\u</span>000c <span class="pl-cce">\x</span>A0<span class="pl-cce">\u</span>FEFF]</span><span class="pl-pds">/</span></span>)<span class="pl-k">!==</span><span class="pl-c1">null</span>){b<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(a);a<span class="pl-k">++</span>}<span class="pl-k">else</span>{b<span class="pl-k">=</span><span class="pl-c1">null</span>;h<span class="pl-k">&amp;&amp;</span>r(<span class="pl-s"><span class="pl-pds">&quot;</span>[<span class="pl-cce">\t\u</span>000b<span class="pl-cce">\u</span>000c <span class="pl-cce">\\</span>xA0<span class="pl-cce">\\</span>uFEFF]<span class="pl-pds">&quot;</span></span>)}v[n]<span class="pl-k">=</span>{nextPos<span class="pl-k">:</span>a,result<span class="pl-k">:</span>b};<span class="pl-k">return</span> b}<span class="pl-k">function</span> <span class="pl-en">Y</span>(){<span class="pl-k">var</span> <span class="pl-en">n</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">c</span>){c.<span class="pl-c1">sort</span>();<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">null</span>,g<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>c.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>)<span class="pl-k">if</span>(c[f]<span class="pl-k">!==</span>d){g.<span class="pl-c1">push</span>(c[f]);d<span class="pl-k">=</span>c[f]}<span class="pl-k">switch</span>(g.<span class="pl-c1">length</span>){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>end of input<span class="pl-pds">&quot;</span></span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">return</span> g[<span class="pl-c1">0</span>];<span class="pl-k">default</span><span class="pl-k">:</span><span class="pl-k">return</span> g.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>, <span class="pl-pds">&quot;</span></span>)<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span> or <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>g[g.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]}}(W),b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,R);b<span class="pl-k">=</span>b<span class="pl-k">&lt;</span>p.<span class="pl-c1">length</span><span class="pl-k">?</span>B(p.<span class="pl-c1">charAt</span>(b))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>end of input<span class="pl-pds">&quot;</span></span>;<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>Expected <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>n<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> but <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> found.<span class="pl-pds">&quot;</span></span>}<span class="pl-k">function</span> <span class="pl-en">Z</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-c1">false</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>R;d<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>p.<span class="pl-c1">charAt</span>(d);<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>){c<span class="pl-k">||</span>n<span class="pl-k">++</span>;b<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">=</span><span class="pl-c1">false</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r</span><span class="pl-pds">&quot;</span></span>|g<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\u</span>2028<span class="pl-pds">&quot;</span></span><span class="pl-k">||</span>g<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\u</span>2029<span class="pl-pds">&quot;</span></span>){n<span class="pl-k">++</span>;b<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span>{b<span class="pl-k">++</span>;c<span class="pl-k">=</span><span class="pl-c1">false</span>}}<span class="pl-k">return</span>{line<span class="pl-k">:</span>n,column<span class="pl-k">:</span>b}}<span class="pl-k">function</span> <span class="pl-en">X</span>(<span class="pl-smi">n</span>,<span class="pl-smi">b</span>){n.<span class="pl-c1">text</span><span class="pl-k">=</span>p.<span class="pl-c1">substring</span>(b.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>@<span class="pl-pds">&quot;</span></span>)[<span class="pl-c1">1</span>],a);<span class="pl-k">return</span> n}<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-c1">true</span>,R<span class="pl-k">=</span><span class="pl-c1">0</span>,W<span class="pl-k">=</span>[],v<span class="pl-k">=</span>{},S<span class="pl-k">=</span>K();<span class="pl-k">if</span>(S<span class="pl-k">===</span><span class="pl-c1">null</span><span class="pl-k">||</span>a<span class="pl-k">!==</span>p.<span class="pl-c1">length</span>){S<span class="pl-k">=</span>Z();<span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">SyntaxError</span>(Y(),S.line,S.column);</td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line">}<span class="pl-k">return</span> S},<span class="pl-en">toSource</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._source}};<span class="pl-c1">H</span>.<span class="pl-en">SyntaxError</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">J</span>,<span class="pl-smi">B</span>){<span class="pl-v">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>SyntaxError<span class="pl-pds">&quot;</span></span>;<span class="pl-v">this</span>.message<span class="pl-k">=</span>p;<span class="pl-v">this</span>.line<span class="pl-k">=</span>J;<span class="pl-v">this</span>.column<span class="pl-k">=</span>B};<span class="pl-c1">H.SyntaxError</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>Error.<span class="pl-c1">prototype</span>;<span class="pl-k">return</span> H}();o.parse<span class="pl-k">=</span>z.parse})(<span class="pl-k">typeof</span> <span class="pl-c1">exports</span><span class="pl-k">!==</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span><span class="pl-k">?</span>exports<span class="pl-k">:</span><span class="pl-c1">window</span>.dust);</td>
      </tr>
</table>

  </div>

</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
    <button type="submit" class="btn">Go</button>
</form></div>

        </div>
      </div>
      <div class="modal-backdrop"></div>
    </div>
  </div>



      <div class="container">
  <div class="site-footer" role="contentinfo">
    <ul class="site-footer-links right">
        <li><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
      <li><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>
        <li><a href="https://github.com/pricing" data-ga-click="Footer, go to pricing, text:pricing">Pricing</a></li>

    </ul>

    <a href="https://github.com" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
</a>
    <ul class="site-footer-links">
      <li>&copy; 2015 <span title="0.03888s from github-fe126-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="https://github.com/site/terms" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li><a href="https://github.com/security" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>
  </div>
</div>



    
    

    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <button type="button" class="flash-close js-flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
        <span class="octicon octicon-x"></span>
      </button>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-06e65f5639cc52d1aaada53115a54614b60fa90ab446a673e3e1818df167663b.js"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-972582e8991811952471fb959c88ac9276363d405d057f8bffdea827bb5734b2.js"></script>
      
      
    <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner hidden">
      <span class="octicon octicon-alert"></span>
      <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
      <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
    </div>
  </body>
</html>

